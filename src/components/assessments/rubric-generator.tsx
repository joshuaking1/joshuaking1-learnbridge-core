'use client';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Wand2, Loader2, FileDown, RefreshCw } from "lucide-react";
import { toast } from 'sonner';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import QRCode from 'qrcode';

export function RubricGenerator() {
    const [loading, setLoading] = useState(false);
    // State is now explicitly typed for clarity
    const [generatedData, setGeneratedData] = useState<{ rubricId: string, rubricCriteria: any[] } | null>(null);
    const [refinementPrompt, setRefinementPrompt] = useState('');

    const { register, handleSubmit, getValues } = useForm({
        defaultValues: {
            subject: "English Language",
            grade: "SHS 2",
            taskDescription: "Write a 500-word argumentative essay on the importance of free speech."
        }
    });

    const handleGenerate = async (data: any, isRefinement = false) => {
        setLoading(true);
        if (!isRefinement) { setGeneratedData(null); }
        
        const apiPayload = {
            generationType: 'rubric',
            ...data,
            refinement_prompt: isRefinement ? refinementPrompt : ''
        };

        const promise = fetch('/api/assessments', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(apiPayload)
        }).then(async (response) => {
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || "An unknown error occurred.");
            }
            return response.json();
        });

        toast.promise(promise, {
            loading: isRefinement ? 'Regenerating rubric with your feedback...' : 'Generating new rubric...',
            success: (result) => {
                // **THE CRITICAL FIX IS HERE**
                // We now defensively check if the result contains the rubricId.
                if (result && result.rubricId) {
                    setGeneratedData(result);
                    return 'Rubric generated and saved successfully!';
                } else {
                    // This will bubble up to the `error` toast.
                    throw new Error('API did not return a valid rubric ID.');
                }
            },
            error: (err) => {
                // This ensures we show a meaningful error if the ID is missing.
                return err.message || 'Failed to generate rubric.';
            },
            finally: () => setLoading(false)
        });
    };

    const handleExport = async () => {
        // Defensive guard clause
        if (!generatedData || !generatedData.rubricId) {
            toast.error("Cannot export: Missing a valid generated rubric ID. Please try generating again.");
            return;
        }

        const doc = new jsPDF({ orientation: 'l', unit: 'mm', format: 'a4' });
        const { subject, grade, taskDescription } = getValues();
        doc.setFontSize(16).setFont('helvetica', 'bold').text('Grading Rubric', 148.5, 15, { align: 'center' });
        doc.setFontSize(10).setFont('helvetica', 'normal').text(`Subject: ${subject} | Class: ${grade}`, 15, 25);
        doc.setFontSize(10).setFont('helvetica', 'bold').text(`Task:`, 15, 32);
        doc.setFontSize(10).setFont('helvetica', 'normal').text(taskDescription, 25, 32, { maxWidth: 250 });
        
        autoTable(doc, {
            startY: 40,
            head: [['Criteria', 'Excellent', 'Proficient', 'Developing', 'Points']],
            body: generatedData.rubricCriteria.map(r => [r.criteria, r.excellent, r.proficient, r.developing, r.points]),
            theme: 'grid',
            styles: { fontSize: 8 },
            headStyles: { fillColor: [2, 46, 125] }
        });
        
        const verificationUrl = `https://beta.learnbridgedu.com/verify/rubric?id=${generatedData.rubricId}`;
        const qrCodeDataUrl = await QRCode.toDataURL(verificationUrl, { width: 20, margin: 1 });
        const finalY = (doc as any).lastAutoTable.finalY || 200; // Fallback Y position
        doc.addImage(qrCodeDataUrl, 'PNG', 15, finalY + 5);
        doc.setFontSize(7).text("Generated by LearnBridgeEdu.com", 40, finalY + 12);
        doc.text(`Verify authenticity: ${verificationUrl}`, 40, finalY + 16);

        doc.save(`Rubric - ${subject}.pdf`);
    };

    return (
        // ... The JSX for the component remains EXACTLY the same.
        <Card>
            <CardHeader><CardTitle>AI Rubric Generator</CardTitle><CardDescription>Create, refine, and export detailed marking schemes.</CardDescription></CardHeader>
            <CardContent>
                <form onSubmit={handleSubmit(data => handleGenerate(data, false))} className="space-y-6">
                     <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2"><Label>Subject</Label><Input {...register("subject")} /></div>
                        <div className="space-y-2"><Label>Grade / Form</Label><Input {...register("grade")} /></div>
                    </div>
                    <div className="space-y-2"><Label>Assessment Task Description</Label><Textarea {...register("taskDescription")} /></div>
                    <div className="flex justify-end"><Button size="lg" type="submit" disabled={loading}><Wand2 className="mr-2 h-4 w-4" /> Generate Rubric</Button></div>
                </form>

                {generatedData && (
                    <div className="pt-6 mt-6 border-t space-y-6">
                        <div className="flex justify-between items-center"><h3 className="text-xl font-bold">Generated Rubric</h3><Button onClick={handleExport} variant="secondary"><FileDown className="mr-2 h-4 w-4" /> Export as PDF</Button></div>
                        <div className="p-4 bg-yellow-50 border rounded-lg space-y-3"><Label className="font-semibold">Refine & Regenerate</Label><Textarea placeholder="e.g., Add a criteria for 'Use of sources'. Make the point values out of 25." value={refinementPrompt} onChange={e => setRefinementPrompt(e.target.value)} /><Button onClick={() => handleGenerate(getValues(), true)} disabled={loading}>{loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin"/> : <RefreshCw className="mr-2 h-4 w-4" />}Regenerate</Button></div>
                        <Table><TableHeader><TableRow><TableHead>Criteria</TableHead><TableHead>Excellent</TableHead><TableHead>Proficient</TableHead><TableHead>Developing</TableHead><TableHead>Points</TableHead></TableRow></TableHeader>
                            <TableBody>{generatedData.rubricCriteria.map((row, index) => (<TableRow key={index}><TableCell className="font-semibold">{row.criteria}</TableCell><TableCell>{row.excellent}</TableCell><TableCell>{row.proficient}</TableCell><TableCell>{row.developing}</TableCell><TableCell className="font-bold">{row.points}</TableCell></TableRow>))}</TableBody>
                        </Table>
                    </div>
                )}
            </CardContent>
        </Card>
    );
}